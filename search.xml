<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ssl证书自动续期工具——acme</title>
    <url>/posts/e691384c.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新申请的网站想找一个https的免费证书，现在的免费证书有效期只有90天，于是想找到一个自动更新证书的工具acme.sh。由于我的域名解析在腾讯云上，我这里结合了腾讯云相关操作，来进行acme.sh服务部署。</p>
<h2 id="下载acme-sh"><a href="#下载acme-sh" class="headerlink" title="下载acme.sh"></a>下载acme.sh</h2><p>将acme.sh下载到你的 <strong>home</strong> 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/acmesh-official/acme.sh.git</span><br><span class="line"></span><br><span class="line">或直接到github进行下载 https://github.com/acmesh-official/acme.sh/releases</span><br></pre></td></tr></table></figure>



<h2 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h2><ol>
<li><p>创建一个<strong>shell</strong>的<strong>alias</strong>方便使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .bashrc</span><br><span class="line">alias acme.sh=~/.acme.sh/acme.sh</span><br><span class="line"></span><br><span class="line">保存退出后 重新加载环境变量</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">安装完成后会自动创建crontab任务检测证书有效期</span><br><span class="line">crontab -e 可看到定时任务</span><br><span class="line">13 5 * * * &quot;/home/ops/.acme.sh&quot;/acme.sh --cron --home &quot;/home/ops/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure>


</li>
<li><p>注意换成自己的邮箱号</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install -m xxx@qq.com </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>设置自动升级</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>选择服务商</li>
</ol>
<p>因为ZeroSSL支持泛域名并且兼容性更好，所以选择了ZeroSSL。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server zerossl</span><br><span class="line"></span><br><span class="line">关联一下自己的邮箱</span><br><span class="line">acme.sh --register-account -m xxx@qq.com --server zerossl</span><br></pre></td></tr></table></figure>

<p>如果需要Let’s Encrypt服务商也可改为Let’s Encrypt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br><span class="line"></span><br><span class="line">关联一下自己的邮箱</span><br><span class="line">acme.sh --register-account -m xxx@qq.com --server letsencrypt</span><br></pre></td></tr></table></figure>



<h2 id="腾讯云创建api秘钥账户"><a href="#腾讯云创建api秘钥账户" class="headerlink" title="腾讯云创建api秘钥账户"></a>腾讯云创建api秘钥账户</h2><p><img src="https://image.qiubite.fun/i/1/2025/03/13/w97286-1.png" alt="image-20250117003138813"></p>
<ol>
<li>创建API秘钥</li>
</ol>
<p>会得到SecretId和SecretKey</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SecretId</span><br><span class="line"></span><br><span class="line">AKIDVr1xxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">SecretKey</span><br><span class="line"></span><br><span class="line">dgeU7Whixxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>将秘钥格式化导入环境变量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export Tencent_SecretId=&quot;xxxxx&quot;</span><br><span class="line">export Tencent_SecretKey=&quot;xxxxx&quot;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><code>Tencent_SecretId</code> 和 <code>Tencent_SecretKey</code> 保存至 <code>~/.acme.sh/account.conf</code> 中，并在需要时自动获取，无需手动再设置。</li>
</ol>
<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>其中<code>*.aaa.com</code>是泛域名，<code>aaa.com</code>是根域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --dns dns_tencent --issue -d *.aaa.com -d aaa.com</span><br></pre></td></tr></table></figure>

<p>命令执行完毕后，证书颁发成功</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/12n4241-1.png" alt="image-20250117004249981"></p>
<h2 id="使用证书"><a href="#使用证书" class="headerlink" title="使用证书"></a>使用证书</h2><h3 id="Nginx示例"><a href="#Nginx示例" class="headerlink" title="Nginx示例"></a>Nginx示例</h3><p>Nginx 的配置项 <code>ssl_certificate</code> 需要使用 <code>/etc/nginx/ssl/fullchain.cer</code></p>
<p>将证书文件复制到nginx配置的ssl证书目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp ~/.acme.sh/\*.aaa.com_ecc/\*.aaa.com.cer /etc/nginx/cert/aaa.com.crt</span><br><span class="line">sudo cp ~/.acme.sh/\*.aaa.com_ecc/\*.aaa.com.key /etc/nginx/cert/aaa.com.key</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name aaa.com;</span><br><span class="line">        server_name *.aaa.com;</span><br><span class="line"></span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        listen [::]:443 ssl;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/nginx/cert/aaa.com.crt;</span><br><span class="line">        ssl_certificate_key /etc/nginx/cert/aaa.com.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>acme</tag>
        <tag>免费证书</tag>
        <tag>自动化申请证书</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux实用教程——批量操作神器</title>
    <url>/posts/3799e173.html</url>
    <content><![CDATA[<h2 id="一、Tmux-简介"><a href="#一、Tmux-简介" class="headerlink" title="一、Tmux 简介"></a>一、Tmux 简介</h2><p>‌<strong>Tmux</strong>‌ 是一款 ‌<strong>终端复用器</strong>‌（Terminal Multiplexer），允许用户在单个终端窗口中同时管理多个终端会话、窗口和窗格。它的核心功能包括：</p>
<ul>
<li>‌<strong>会话管理</strong>‌：保持长时间运行的进程（如 SSH 连接），断网后仍可恢复。</li>
<li>‌<strong>窗口和窗格</strong>‌：将终端分割为多个窗格（Pane）或窗口（Window），提升多任务效率。</li>
</ul>
<p>对比传统终端，Tmux 解决了长任务依赖终端存活的问题，且提升多任务操作效率。特别是在cp或者mv文件期间，一旦我们的远程连接工具所在的工作电脑出现断网或断电的情况那么传输就会因此中断。</p>
<h2 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a>二、核心概念</h2><ol>
<li><h3 id="Session（会话）"><a href="#Session（会话）" class="headerlink" title="Session（会话）"></a>Session（会话）</h3></li>
</ol>
<ul>
<li><p><strong>定义</strong>‌：顶层管理单位，代表一个独立的工作环境（如一个开发项目）。</p>
</li>
<li><p><strong>作用‌</strong>：隔离不同任务，长期保存工作进度。</p>
</li>
<li><p><strong>示例</strong>‌：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmux new -s dev_project  # 创建名为 &quot;dev_project&quot; 的会话</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><h3 id="Window（窗口）"><a href="#Window（窗口）" class="headerlink" title="Window（窗口）"></a>Window（窗口）</h3></li>
</ol>
<ul>
<li>‌<strong>定义</strong>‌：会话中的二级单位，类似浏览器标签页，用于分隔同一任务的不同阶段。</li>
<li>‌<strong>作用</strong>‌：管理相关但独立的操作流（如代码编辑、服务器监控）。</li>
<li>‌<strong>示例</strong>‌：<ul>
<li>Window1：前端开发</li>
<li>Window2：后端调试</li>
</ul>
</li>
</ul>
<ol start="3">
<li><h3 id="Pane（窗格）"><a href="#Pane（窗格）" class="headerlink" title="Pane（窗格）"></a>Pane（窗格）</h3></li>
</ol>
<ul>
<li><p>‌<strong>定义</strong>‌：窗口内分割出的子区域，支持并行操作。</p>
</li>
<li><p>‌<strong>作用</strong>‌：在单一窗口中同时执行多个命令（如左侧写代码，右侧运行测试）。</p>
</li>
<li><p>‌<strong>示例</strong>‌：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Prefix + %   # 垂直分屏 </span><br><span class="line">Prefix + &quot;   # 水平分屏</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><h3 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h3></li>
</ol>
<p>​	Session → Window → Pane</p>
<ul>
<li>‌<strong>比喻</strong>‌：<ul>
<li>Session &#x3D; 整个项目</li>
<li>Window &#x3D; 项目的不同阶段（开发、测试）</li>
<li>Pane &#x3D; 阶段内的具体操作界面</li>
</ul>
</li>
</ul>
<h2 id="三、安装-Tmux"><a href="#三、安装-Tmux" class="headerlink" title="三、安装 Tmux"></a>三、安装 Tmux</h2><ol>
<li><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h3></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu/Debian</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install tmux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CentOS/RHEL</span></span><br><span class="line">sudo yum install tmux    # 或 sudo dnf install tmux（新版本）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Arch Linux</span></span><br><span class="line">sudo pacman -S tmux</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a><strong>MacOS</strong></h3></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 Homebrew</span></span><br><span class="line">brew install tmux</span><br></pre></td></tr></table></figure>



<h2 id="四、Tmux基本操作与快捷键"><a href="#四、Tmux基本操作与快捷键" class="headerlink" title="四、Tmux基本操作与快捷键"></a>四、Tmux基本操作与快捷键</h2><p>Tmux 大部分操作需先按 <strong>前缀键</strong>（默认 Ctrl+b），再按功能键。以下所有的前缀键都简称为<strong>Prefix</strong>。</p>
<ol>
<li><h3 id="会话（Session）操作"><a href="#会话（Session）操作" class="headerlink" title="会话（Session）操作"></a>会话（Session）操作</h3></li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>命令&#x2F;快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>新建会话</td>
<td><code>tmux new -s &lt;会话名&gt;</code> 或 <code>tmux new</code></td>
<td>创建指定名称的会话或创建默认会话名</td>
</tr>
<tr>
<td>分离当前会话</td>
<td><code>Prefix + d</code></td>
<td>退出 Tmux，会话后台运行</td>
</tr>
<tr>
<td>列出会话</td>
<td><code>tmux ls</code> 或 <code>Prefix + s</code></td>
<td>查看所有会话</td>
</tr>
<tr>
<td>恢复会话</td>
<td><code>tmux attach -t &lt;会话名&gt;</code></td>
<td>重新接入指定会话</td>
</tr>
<tr>
<td>关闭会话</td>
<td><code>tmux kill-session -t &lt;会话名&gt;</code></td>
<td>终止指定会话</td>
</tr>
</tbody></table>
<ol start="2">
<li><h3 id="窗口（Window）操作"><a href="#窗口（Window）操作" class="headerlink" title="窗口（Window）操作"></a>窗口（Window）操作</h3></li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>新建窗口</td>
<td><code>Prefix + c</code></td>
<td>创建新窗口（编号从 0 开始）</td>
</tr>
<tr>
<td>切换窗口</td>
<td><code>Prefix + 0~9</code></td>
<td>按编号切换窗口</td>
</tr>
<tr>
<td>重命名窗口</td>
<td><code>Prefix + ,</code></td>
<td>自定义窗口名称（如”API调试”）</td>
</tr>
<tr>
<td>关闭窗口</td>
<td><code>Prefix + &amp;</code></td>
<td>关闭当前窗口（需确认）</td>
</tr>
<tr>
<td>窗口列表</td>
<td><code>Prefix + w</code></td>
<td>可视化选择窗口</td>
</tr>
</tbody></table>
<ol start="3">
<li><h3 id="窗格（Pane）操作"><a href="#窗格（Pane）操作" class="headerlink" title="窗格（Pane）操作"></a>窗格（Pane）操作</h3></li>
</ol>
<table>
<thead>
<tr>
<th>操作</th>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>垂直分割</td>
<td><code>Prefix + %</code></td>
<td>左右分屏（| 状）</td>
</tr>
<tr>
<td>水平分割</td>
<td><code>Prefix + &quot;</code></td>
<td>上下分屏（— 状）</td>
</tr>
<tr>
<td>切换焦点</td>
<td><code>Prefix + 方向键</code></td>
<td>按方向移动焦点</td>
</tr>
<tr>
<td>关闭窗格</td>
<td><code>Prefix + x</code></td>
<td>关闭当前窗格（需确认）</td>
</tr>
<tr>
<td>调整大小</td>
<td><code>Prefix + Ctrl+方向键</code></td>
<td>按住方向键精细调整</td>
</tr>
<tr>
<td>全屏显示</td>
<td><code>Prefix + z</code></td>
<td>临时放大当前窗格</td>
</tr>
</tbody></table>
<h2 id="五、实用技巧"><a href="#五、实用技巧" class="headerlink" title="五、实用技巧"></a>五、实用技巧</h2><ol>
<li><h3 id="同步操作多个窗"><a href="#同步操作多个窗" class="headerlink" title="同步操作多个窗"></a>同步操作多个窗</h3></li>
</ol>
<ul>
<li><code>Ctrl + b</code> → <code>:</code> → 输入 <code>setw synchronize-panes</code> → <code>Enter</code> （再次输入取消）</li>
</ul>
<ol start="2">
<li><h3 id="复制模式"><a href="#复制模式" class="headerlink" title="复制模式"></a>复制模式</h3></li>
</ol>
<ul>
<li><code>Ctrl + b</code> → <code>[</code>：进入复制模式，选择文本后按 <code>Enter</code> 复制。</li>
<li><code>Ctrl + b</code> → <code>]</code>：粘贴已复制内容。</li>
</ul>
<ol start="3">
<li><h3 id="快速跳转"><a href="#快速跳转" class="headerlink" title="快速跳转"></a>快速跳转</h3></li>
</ol>
<ul>
<li><code>Ctrl + b</code> → <code>q</code>：显示窗格编号，按数字键快速跳转。</li>
</ul>
<ol start="4">
<li><h3 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h3></li>
</ol>
<ul>
<li><code>Ctrl + b</code> → <code>:</code> → 输入 <code>source-file ~/.tmux.conf</code> → <code>Enter</code></li>
</ul>
<h2 id="六、自定义配置"><a href="#六、自定义配置" class="headerlink" title="六、自定义配置"></a>六、自定义配置</h2><p>编辑 <code>~/.tmux.conf</code> 可自定义快捷键和功能，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动鼠标控制</span></span><br><span class="line">set -g mouse on</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;C-s R&quot;</span> 重载 tmux 配置</span></span><br><span class="line">bind R source-file ~/.tmux.conf \; display-message &quot;Tmux Config reloaded...&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 Prefix+y 同步控制所有窗口</span></span><br><span class="line">bind y setw synchronize-panes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">窗口重命名</span></span><br><span class="line">set -w -g allow-rename on</span><br><span class="line">set -w -g automatic-rename on</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">窗口操作默认按键绑定</span></span><br><span class="line">set -w -g mode-keys vi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终端颜色</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此颜色应当与所使用终端配置一致，当前为 Alacritty</span></span><br><span class="line">set -g default-terminal &quot;xterm-256color&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a: append</span></span><br><span class="line">set -ga terminal-overrides &quot;,xterm-256color:Tc:clipboard&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防止自动关闭 Session</span></span><br><span class="line">set -g destroy-unattached off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">颜色</span></span><br><span class="line">set -g status-bg default</span><br><span class="line">set -g status-fg white</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新时间</span></span><br><span class="line">set -g status-interval 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对齐方式</span></span><br><span class="line">set -g status-justify centre</span><br></pre></td></tr></table></figure>



<h2 id="七、脚本分享"><a href="#七、脚本分享" class="headerlink" title="七、脚本分享"></a>七、脚本分享</h2><p>分享一个tmux批量ssh服务器的脚本，前提是已经将公钥加到对应的服务器上可以直接ssh登录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件名: tmux-multissh.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用途：自动创建 Tmux 会话并连接多台主机</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数：./tmux-multissh.sh [-l 用户名] [-p 端口] [-n 会话名称] &lt;主机列表文件&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：./tmux-multissh.sh -l ops -p 22 -n docker hosts.txt</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查参数</span></span><br><span class="line">if [ $# -lt 1 ]; then</span><br><span class="line">    tmux</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置变量</span></span><br><span class="line">SESSION_NAME=&quot;multi_ssh&quot; # 会话名称（默认 multi_ssh）</span><br><span class="line">LAYOUT=&quot;tiled&quot;                  # 布局方式 (tiled, even-horizontal, even-vertical)</span><br><span class="line">SSH_OPTIONS=&quot;-o ConnectTimeout=5 -o StrictHostKeyChecking=no&quot; # SSH 连接选项</span><br><span class="line">PORT=&quot;22&quot;</span><br><span class="line">PANES_PER_WINDOW=4  # 每个窗口最大面板数</span><br><span class="line">USER=&quot;ops&quot;</span><br><span class="line"></span><br><span class="line">while getopts &quot;:l:p:n:&quot; opt</span><br><span class="line">do</span><br><span class="line">    case $opt in</span><br><span class="line">        l)USER=$OPTARG;;                  # 指定SSH 用户名</span><br><span class="line">        p)PORT=$OPTARG;;                  # 指定SSH 端口</span><br><span class="line">        n)SESSION_NAME=$OPTARG;;          # 指定会话名称</span><br><span class="line">        :) echo &quot;错误: 选项 -$OPTARG 需要参数&quot; &gt;&amp;2; exit 1 ;;</span><br><span class="line">        \?) echo &quot;无效选项: -$OPTARG&quot; &gt;&amp;2</span><br><span class="line">            echo &quot;用法: $0 [-l 用户名] [-p 端口] [-n 会话名称] &lt;主机列表文件&gt;&quot; &gt;&amp;2</span><br><span class="line">            exit 1 ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">HOST_FILE=`echo $* | awk &#x27;&#123;print $NF&#125;&#x27;`              # 主机列表文件路径</span><br><span class="line">shift $((OPTIND -1))              # 移除已解析选项</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查必要工具</span></span><br><span class="line">command -v tmux &gt;/dev/null 2&gt;&amp;1 || &#123; echo &quot;错误: 请先安装 tmux&quot;; exit 1; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取主机列表</span></span><br><span class="line">if [ ! -f &quot;$HOST_FILE&quot; ]; then</span><br><span class="line">    echo &quot;错误: 主机文件 $HOST_FILE 不存在&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否已有同名会话</span></span><br><span class="line">if tmux has-session -t &quot;$SESSION_NAME&quot; 2&gt;/dev/null; then</span><br><span class="line">    echo &quot;错误: 会话 $SESSION_NAME 已存在，请先关闭或使用不同名称&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">readarray -t HOSTS &lt; &lt;(grep -v &#x27;^[[:space:]]*#&#x27; &quot;$HOST_FILE&quot; | grep -v &#x27;^[[:space:]]*$&#x27;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新会话（第一个窗口）</span></span><br><span class="line">tmux new-session -d -s &quot;$SESSION_NAME&quot; -n &quot;SSH-Panel-0&quot;</span><br><span class="line">tmux send-keys -t &quot;$SESSION_NAME:0&quot; &quot;ssh $&#123;SSH_OPTIONS&#125; -p $PORT $USER@$(head -n 1 &quot;$HOST_FILE&quot;)&quot; C-m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查主机列表是否为空</span></span><br><span class="line">HOSTS_COUNT=$&#123;#HOSTS[@]&#125;</span><br><span class="line">[ $HOSTS_COUNT -eq 0 ] &amp;&amp; &#123; echo &quot;错误: 主机列表为空&quot;; exit 1; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为剩余主机创建连接面板</span></span><br><span class="line">for ((i=1; i&lt;HOSTS_COUNT; i++)); do</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">计算窗口编号（每PANES_PER_WINDOW个主机一个窗口）</span></span><br><span class="line">  window=$((i / PANES_PER_WINDOW))</span><br><span class="line">  pane=$((i % PANES_PER_WINDOW))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">创建新窗口（当需要时）</span></span><br><span class="line">  if [ $pane -eq 0 ]; then</span><br><span class="line">    tmux new-window -t &quot;$SESSION_NAME:$window&quot; -n &quot;SSH-Panel-$window&quot;</span><br><span class="line">  else</span><br><span class="line">    tmux split-window -t &quot;$SESSION_NAME:$window&quot; -h</span><br><span class="line">  fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">发送SSH连接命令并调整布局</span></span><br><span class="line">  tmux send-keys -t &quot;$SESSION_NAME:$window.$pane&quot; \</span><br><span class="line">    &quot;ssh $&#123;SSH_OPTIONS&#125; -p $PORT $USER@$&#123;HOSTS[$i]&#125;&quot; C-m</span><br><span class="line">  tmux select-layout -t &quot;$SESSION_NAME:$window&quot; &quot;$LAYOUT&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置初始窗口和焦点</span></span><br><span class="line">tmux select-window -t &quot;$SESSION_NAME:0&quot;</span><br><span class="line">tmux select-pane -t 0</span><br><span class="line">tmux setw -t &quot;$SESSION_NAME&quot; synchronize-panes off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户交互</span></span><br><span class="line">read -p &quot;是否立即附加到会话？[Y/n] &quot; -n 1 -r</span><br><span class="line">echo</span><br><span class="line">if [[ $REPLY =~ ^[Nn]$ ]]; then</span><br><span class="line">  echo &quot;会话已在后台运行，附加命令: tmux attach -t $SESSION_NAME&quot;</span><br><span class="line">else</span><br><span class="line">  tmux attach -t &quot;$SESSION_NAME&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>



<p>可以做一个简单别名，更方便执行。将下文写入到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入自定义别名</span></span><br><span class="line">vim .bashrc      </span><br><span class="line"></span><br><span class="line">alias tmuxa=&#x27;./tmux-multissh.sh&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后重新加载配置文件</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>



<p>这样就可以更方便的同时ssh到多台服务器，例如：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/13/vocqry-1.png" alt="image-20250313191539703"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>tmux</tag>
        <tag>批量操作工具</tag>
        <tag>tmux快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>手动搭建 WordPress 个人站点(Linux)</title>
    <url>/posts/c171e9f0.html</url>
    <content><![CDATA[<h2 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h2><p>WordPress 是一款使用 PHP 语言开发的博客平台，您可使用通过 WordPress 搭建属于个人的博客平台或个人网站。本文以 debian 12.6 操作系统服务器为例，手动搭建 WordPress 个人站点。</p>
<h2 id="示例软件版本"><a href="#示例软件版本" class="headerlink" title="示例软件版本"></a>示例软件版本</h2><p>本文搭建的 WordPress 个人站点组成版本及说明如下：</p>
<ul>
<li>Linux：Linux 操作系统，本文以 debian 12.6 为例。</li>
<li>Nginx：Web 服务器，本文以  Nginx 1.22.1 为例。</li>
<li>MariaDB：数据库，本文以 MariaDB 10.11.6 为例。</li>
<li>PHP：脚本语言，本文以 PHP 8.2.20 为例。</li>
<li>WordPress：博客平台，本文以 WordPress 6.6.1 为例。</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="步骤1：登录-Linux-实例"><a href="#步骤1：登录-Linux-实例" class="headerlink" title="步骤1：登录 Linux 实例"></a>步骤1：登录 Linux 实例</h3><p>根据实际操作习惯，选择其他不同的登录方式：如使用ssh登录、通过vnc登录等。</p>
<h3 id="步骤2：手动搭建-LNMP-环境"><a href="#步骤2：手动搭建-LNMP-环境" class="headerlink" title="步骤2：手动搭建 LNMP 环境"></a>步骤2：手动搭建 LNMP 环境</h3><p>LNMP 是 Linux、Nginx、MariaDB 和 PHP 的缩写，这个组合是最常见的 Web 服务器的运行环境之一。在登录服务器实例之后，您可以参见 <a href="https://www.qiubite.fun/posts/9d5ca845.html">手动搭建 LNMP 环境</a>完成基本环境搭建。</p>
<h3 id="步骤3：配置数据库"><a href="#步骤3：配置数据库" class="headerlink" title="步骤3：配置数据库"></a>步骤3：配置数据库</h3><ol>
<li>执行以下命令，进入 MariaDB。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行以下命令，创建 MariaDB 数据库。例如 “wordpress”。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE wordpress;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行以下命令，创建一个新用户。例如 “user”，登录密码为 <code>123456</code>。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user &#x27;user&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行以下命令，赋予用户对 “wordpress” 数据库的全部权限。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON wordpress.* TO &#x27;user&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>执行以下命令，设置 root 账户密码。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER root@localhost IDENTIFIED VIA mysql_native_password USING PASSWORD(&#x27;输入您的密码&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>执行以下命令，使所有配置生效。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>执行以下命令，退出 MariaDB。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure>

<h3 id="步骤4：安装和配置-WordPress"><a href="#步骤4：安装和配置-WordPress" class="headerlink" title="步骤4：安装和配置 WordPress"></a>步骤4：安装和配置 WordPress</h3><h4 id="下载-WordPress"><a href="#下载-WordPress" class="headerlink" title="下载 WordPress"></a>下载 WordPress</h4><ol>
<li>执行以下命令，删除网站根目录下用于测试 PHP-Nginx 配置的<code>index.php</code>文件。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/share/nginx/html/index.php</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>依次执行以下命令，进入<code>/usr/share/nginx/html/</code>目录，并下载与解压 WordPress。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">wget https://cn.wordpress.org/wordpress-6.6.1-zh_CN.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf wordpress-6.6.1-zh_CN.tar.gz</span><br></pre></td></tr></table></figure>



<p>WordPress可以放到自定义的目录，修改时需要同步修改nginx配置文件中root 描述的目录。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/12fr07r-1.png" alt="image-20240907200548425"></p>
<h4 id="修改-WordPress-配置文件"><a href="#修改-WordPress-配置文件" class="headerlink" title="修改 WordPress 配置文件"></a>修改 WordPress 配置文件</h4><ol>
<li>依次执行以下命令，进入 WordPress 安装目录，将<code>wp-config-sample.php</code>文件复制到<code>wp-config.php</code>文件中，并将原先的示例配置文件保留作为备份。</li>
</ol>
<figure class="highlight shellsession"><table><tr><td class="code"><pre><span class="line">cd /usr/share/nginx/html/wordpress</span><br><span class="line">cp wp-config-sample.php wp-config.php</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行以下命令，打开并编辑新创建的配置文件。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim wp-config.php</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按 <strong>i</strong> 切换至编辑模式，找到文件中 MySQL 的部分，并将相关配置信息修改为配置 WordPress 数据库 中的内容。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> // ** Database settings - You can get this info from your web host ** //</span><br><span class="line">/** The name of the database for WordPress */</span><br><span class="line">define( &#x27;DB_NAME&#x27;, &#x27;wordpress&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database username */</span><br><span class="line">define( &#x27;DB_USER&#x27;, &#x27;user&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database password */</span><br><span class="line">define( &#x27;DB_PASSWORD&#x27;, &#x27;123456&#x27; );</span><br><span class="line"></span><br><span class="line">/** Database hostname */</span><br><span class="line">define( &#x27;DB_HOST&#x27;, &#x27;localhost&#x27; );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改完成后，按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</li>
</ol>
<h3 id="步骤5：验证-WordPress-安装"><a href="#步骤5：验证-WordPress-安装" class="headerlink" title="步骤5：验证 WordPress 安装"></a>步骤5：验证 WordPress 安装</h3><ol>
<li>在浏览器地址栏输入<code>http://域名或公网 IP/wordpress 文件夹</code>，例如：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.xxx.xxx.xx/wordpress  </span><br><span class="line">或</span><br><span class="line">http://xxx.com/wordpress</span><br></pre></td></tr></table></figure>

<p>转至 WordPress 安装页，开始配置 WordPress。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/12fqy0a-1.png" alt="配置WP1"></p>
<ol start="2">
<li>根据 WordPress 安装向导提示输入以下安装信息，单击<strong>安装 WordPress</strong>，完成安装。</li>
</ol>
<table>
<thead>
<tr>
<th>所需信息</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>站点标题</td>
<td>WordPress 网站名称。</td>
</tr>
<tr>
<td>用户名</td>
<td>WordPress 管理员名称。出于安全考虑，建议设置一个不同于 admin 的名称。因为与默认用户名称 admin 相比，该名称更难破解。</td>
</tr>
<tr>
<td>密码</td>
<td>可以使用默认的密码或者自定义密码。请勿重复使用现有密码，并确保将密码保存在安全的位置。</td>
</tr>
<tr>
<td>您的电子邮件</td>
<td>用于接收通知的电子邮件地址。</td>
</tr>
</tbody></table>
<ol start="3">
<li>输入在安装WordPress时设置的<strong>用户名</strong>和<strong>密码</strong>，然后单击<strong>登录</strong></li>
</ol>
<p>成功进入您个人的WordPress网站。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>手动搭建 WordPress</tag>
        <tag>Nginx</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
        <tag>Linux</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>手动搭建LNMP环境</title>
    <url>/posts/9d5ca845.html</url>
    <content><![CDATA[<h2 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h2><p>LNMP 环境是指在 Linux 系统下，由 Nginx + MySQL&#x2F;MariaDB + PHP 组成的网站服务器架构。本文档介绍如何在服务器上手动搭建 LNMP 环境。</p>
<h2 id="示例软件版本"><a href="#示例软件版本" class="headerlink" title="示例软件版本"></a>示例软件版本</h2><p>本文搭建的 LNMP 环境软件组成版本及说明如下：</p>
<ul>
<li>Linux：Linux 操作系统，本文以 debian 12.6 为例。</li>
<li>Nginx：Web 服务器，本文以  Nginx 1.22.1 为例。</li>
<li>MariaDB：数据库，本文以 MariaDB 10.11.6 为例。</li>
<li>PHP：脚本语言，本文以 PHP 8.2.20 为例。</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="步骤1：登录-Linux"><a href="#步骤1：登录-Linux" class="headerlink" title="步骤1：登录 Linux"></a>步骤1：登录 Linux</h3><p>根据实际操作习惯，选择其他不同的登录方式：如使用ssh登录、通过vnc登录等。</p>
<h3 id="步骤2：安装-Nginx"><a href="#步骤2：安装-Nginx" class="headerlink" title="步骤2：安装 Nginx"></a>步骤2：安装 Nginx</h3><ol>
<li>确认源文件正常，执行以下命令。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>确认源文件正常,按 <strong>i</strong> 切换至编辑模式，写入以下内容,或使用确认的内部、外部源地址。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tencentyun.com/debian bookworm main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src http://mirrors.tencentyun.com/debian bookworm main contrib non-free non-free-firmware</span></span><br><span class="line">deb http://mirrors.tencentyun.com/debian bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src http://mirrors.tencentyun.com/debian bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class="line">deb http://mirrors.tencentyun.com/debian-security/ bookworm-security main contrib non-free-firmware</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deb-src http://mirrors.tencentyun.com/debian-security/ bookworm-security main contrib non-free-firmware</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件并返回。</p>
</li>
<li><p>执行以下命令，安装 nginx。</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx-full</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>执行以下命令，打开 <code>default.conf</code> 文件，并填写对应申请域名的地址。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/default.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        listen 80;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       listen [::]:80;   //ipv6监听 如有需要可放开</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       listen 443 ssl;   //https  ssl 443监听 如有需要可放开</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       listen [::]:443 ssl;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       ssl_certificate /etc/nginx/cert/qiubite.site.crt;   //ssl证书位置</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       ssl_certificate_key /etc/nginx/cert/qiubite.site.key;  //ssl证书位置</span></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       proxy_http_version 1.1;       //长连接以及请求头传到后端</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       proxy_set_header Connection <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       proxy_set_header Host      <span class="variable">$host</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span></span><br><span class="line">    </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">    </span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">                index index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">                root   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">                fastcgi_pass unix:/var/run/php/php-fpm.sock;</span><br><span class="line">                fastcgi_index  index.php;</span><br><span class="line">                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">                include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件并返回。</p>
</li>
<li><p>执行以下命令检查语法并启动 Nginx，设置 Nginx 为开机自启动。</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl enable nginx </span><br></pre></td></tr></table></figure>

<ol start="8">
<li>在本地浏览器中访问nginx中配置的域名或公网IP，查看 Nginx 服务是否正常运行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://云服务器实例的公网 IP 或配置的域名</span><br></pre></td></tr></table></figure>

<p>显示如下，则说明 Nginx 安装配置成功。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/118uzet-1.png" alt="image-20240906160236974"></p>
<h3 id="步骤3：安装数据库"><a href="#步骤3：安装数据库" class="headerlink" title="步骤3：安装数据库"></a>步骤3：安装数据库</h3><ol>
<li>执行以下命令，查看系统中是否已安装 MariaDB。 如未安装可继续安装数据库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt search mariadb | grep mariadb   //查看系统中是否已安装 MariaDB</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install mariadb-server mariadb-client   //安装数据库</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行以下命令，启动 MariaDB 服务，设置 MariaDB 为开机自启动。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mariadb</span><br><span class="line">sudo systemctl enable mariadb</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行以下命令，验证 MariaDB 是否安装成功。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<p>显示结果如下，则成功安装。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/118v245-1.png" alt="image-20240906161306943"></p>
<ol start="4">
<li>执行以下命令，退出 MariaDB。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; quit</span><br></pre></td></tr></table></figure>

<h3 id="步骤4：安装配置-PHP"><a href="#步骤4：安装配置-PHP" class="headerlink" title="步骤4：安装配置 PHP"></a>步骤4：安装配置 PHP</h3><ol>
<li>执行以下命令，安装 PHP 8.2 所需要的包。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt search php-fpm   \\查看软件源中php的版本</span><br><span class="line"></span><br><span class="line">sudo apt install php libapache2-mod-php php-mysql php-cli php-curl php-xml php-gd php-mbstring php-fpm php-json php-pear php-bcmath php-mcrypt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行以下命令，验证 PHP 是否安装成功。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure>

<p>显示结果如下，则成功安装。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/118v3fr-1.png" alt="image-20240906162008081"></p>
<h2 id="验证环境配置"><a href="#验证环境配置" class="headerlink" title="验证环境配置"></a>验证环境配置</h2><p>当您完成环境配置后，可以通过以下验证 LNMP 环境是否搭建成功。</p>
<ol>
<li>执行以下命令，创建测试文件。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; | sudo tee /usr/share/nginx/html/index.php</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>在本地浏览器中访问如下地址，查看环境配置是否成功。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://云服务器实例的公网 IP/index.php  或 http://nginx配置的域名/index.php</span><br></pre></td></tr></table></figure>

<p>显示结果如下，则说明环境配置成功。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/03/118v4v9-1.png" alt="image-20240906164852151"></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
        <tag>Linux</tag>
        <tag>wordpress</tag>
        <tag>LNMP环境</tag>
      </tags>
  </entry>
  <entry>
    <title>解析WordPress网站域名与常见问题</title>
    <url>/posts/4c6ec737.html</url>
    <content><![CDATA[<h2 id="解析WordPress网站域名"><a href="#解析WordPress网站域名" class="headerlink" title="解析WordPress网站域名"></a>解析WordPress网站域名</h2><p>通过公网IP地址直接访问您的WordPress网站会降低服务端的安全性。如果您已有域名或者想为WordPress网站注册一个域名，可以参考以下步骤。</p>
<ol>
<li><h3 id="注册域名。"><a href="#注册域名。" class="headerlink" title="注册域名。"></a>注册域名。</h3></li>
</ol>
<p><a href="https://www.alibabacloud.com/help/zh/dws/user-guide/register-a-domain-name-on-alibaba-cloud#task-1830383">阿里云域名注册流程</a></p>
<p><a href="https://cloud.tencent.com/document/product/242/9595">腾讯云域名注册流程</a></p>
<p><a href="https://support.huaweicloud.com/usermanual-domain/domain_ug_310004.html">华为云域名注册流程</a></p>
<ol start="2">
<li><h3 id="备案域名。"><a href="#备案域名。" class="headerlink" title="备案域名。"></a>备案域名。</h3><p>如果您的域名指向的网站托管在中国内地节点服务器，则需要到对应云平台上进行ICP备案，时长按照备案地处理速度，一般在1-30个工作日。如果不备案可能会导致域名无法访问。</p>
</li>
<li><h3 id="解析域名。将域名指向实例公网IP。"><a href="#解析域名。将域名指向实例公网IP。" class="headerlink" title="解析域名。将域名指向实例公网IP。"></a>解析域名。将域名指向实例公网IP。</h3><p>域名解析是使用域名访问您的网站的必备环节。请在托管的云平台上进行解析，具体参考各云平台的文档，如需IPV6的访问请添加AAAA解析。</p>
</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="一、WordPress中更新版本、上传主题或插件时，提示需要FTP登录凭证或无法创建目录"><a href="#一、WordPress中更新版本、上传主题或插件时，提示需要FTP登录凭证或无法创建目录" class="headerlink" title="一、WordPress中更新版本、上传主题或插件时，提示需要FTP登录凭证或无法创建目录"></a>一、WordPress中更新版本、上传主题或插件时，提示需要FTP登录凭证或无法创建目录</h3><p>该问题可能是因为WordPress配置文件主题或插件的权限不足，您可以参考以下步骤解决。</p>
<ol>
<li><p>登录搭建WordPress的服务器</p>
</li>
<li><p>运行以下命令，打开WordPress配置文件（wp-config.php文件位置请根据实际服务器上自定义的位置进行更换）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/share/nginx/html/wordpress/wp-config.php</span><br></pre></td></tr></table></figure>
</li>
<li><p>按<code>i</code>键进入编辑模式。</p>
</li>
<li><p>在最下方，添加如下代码。</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">define(&quot;FS_METHOD&quot;,&quot;direct&quot;);</span><br><span class="line">define(&quot;FS_CHMOD_DIR&quot;, 0777);</span><br><span class="line">define(&quot;FS_CHMOD_FILE&quot;, 0777);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>按<code>Esc</code>键，输入<code>:wq</code>后按<code>Enter</code>键，保存退出配置文件。</p>
</li>
<li><p>返回WordPress仪表盘，刷新页面，可解决需要FTP登录凭证的问题。</p>
<p>如果仍存在无法创建目录的问题，需再次返回登录，运行以下命令，将网站根目录的权限用户更新为Nginx对应的用户，本示例环境中为<code>www-data</code>用户。</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown -R www-data /usr/share/nginx/html/wordpress</span><br></pre></td></tr></table></figure>



<h3 id="二、如果在设置过程中域名改错造成网站无法访问或需要将之前的公网IP换成新域名需要直接修改数据库"><a href="#二、如果在设置过程中域名改错造成网站无法访问或需要将之前的公网IP换成新域名需要直接修改数据库" class="headerlink" title="二、如果在设置过程中域名改错造成网站无法访问或需要将之前的公网IP换成新域名需要直接修改数据库"></a>二、如果在设置过程中域名改错造成网站无法访问或需要将之前的公网IP换成新域名需要直接修改数据库</h3><p>操作步骤如下：</p>
<ol>
<li><p>登录数据库，root密码具体看配置数据库时修改的数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure>

</li>
<li><p>查寻并修改数据库</p>
<blockquote>
<p>本示例将域名<code>www.example1.com</code>改为<a href="http://www.example2.com./">www.example2.com。</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use wordpress;</span><br><span class="line"></span><br><span class="line">MariaDB [wordpress]&gt; select * from wp_options where option_value like &#x27;%www.example1.com&#x27;;</span><br><span class="line"></span><br><span class="line">+-----------+-------------+---------------------------+----------+</span><br><span class="line">| option_id | option_name | option_value              | autoload |</span><br><span class="line">+-----------+-------------+---------------------------+----------+</span><br><span class="line">|         2 | siteurl     | https://www.example1.com  | on       |</span><br><span class="line">|         3 | home        | https://www.example1.com  | on       |</span><br><span class="line">+-----------+-------------+---------------------------+----------+</span><br><span class="line">2 rows in set (0.046 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [wordpress]&gt; update wp_options set option_value=replace(option_value, &#x27;https://www.example2.com&#x27;, &#x27;https://www.example2.com&#x27;) where option_name = &#x27;home&#x27; OR option_name = &#x27;siteurl&#x27;;</span><br><span class="line"></span><br><span class="line">MariaDB [wordpress]&gt; exit;</span><br></pre></td></tr></table></figure>


</li>
<li><p>成功为WordPress网站设置新域名。</p>
</li>
</ol>
<h3 id="三、WordPress上传安装主题提示“您所关注的链接已过期”解决办法"><a href="#三、WordPress上传安装主题提示“您所关注的链接已过期”解决办法" class="headerlink" title="三、WordPress上传安装主题提示“您所关注的链接已过期”解决办法"></a>三、WordPress上传安装主题提示“您所关注的链接已过期”解决办法</h3><p>在使用wordPress的时候，可能会遇到“您关注的链接已过期”或The link you followed has expired” 错误，一般从WordPress管理后台上传WordPress主题或插件到您的网站时，通常会发生此错误。WordPress有一个设置参数，可以控制从WordPress管理后台上传的文件的大小。</p>
<ol>
<li><p>登录服务器，查看配置文件位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep php</span><br><span class="line"></span><br><span class="line">www-data 2754144 3454264  0 17:16 ?        00:00:01 php-fpm: pool www</span><br><span class="line">www-data 2754145 3454264  0 17:16 ?        00:00:01 php-fpm: pool www</span><br><span class="line">ops      2756021 2745748  0 17:22 pts/0    00:00:00 grep php</span><br><span class="line">root     3454264       1  0 Sep06 ?        00:00:40 php-fpm: master process (/etc/php/8.2/fpm/php-fpm.conf)</span><br><span class="line"></span><br><span class="line">可以确认配置文件在/etc/php/8.2/fpm/ 目录 修改该目录下的php.ini文件</span><br><span class="line">提前备份文件</span><br><span class="line">sudo cp /etc/php/8.2/fpm/php.ini /etc/php/8.2/fpm/php.ini.bak</span><br><span class="line">sudo vim /etc/php/8.2/fpm/php.ini</span><br><span class="line"></span><br><span class="line">打开文件后修改下面三行参数，保存并退出</span><br><span class="line"></span><br><span class="line">upload_max_filesize = 64M</span><br><span class="line">post_max_size = 64M</span><br><span class="line">max_execution_time = 300</span><br></pre></td></tr></table></figure>


</li>
<li><p>服务重新加载配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload php8.2-fpm.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>修复完成验证</p>
<p>可以再次上传测试，限制调整为可以上传单个文件的最大大小为64M，最大执行时间为300秒。</p>
</li>
</ol>
<h3 id="四、Nginx伪静态规则"><a href="#四、Nginx伪静态规则" class="headerlink" title="四、Nginx伪静态规则"></a>四、Nginx伪静态规则</h3><p>若在发布文章出现“此响应不是合法的JSON响应”，则需要检查nginx伪静态规则是否配置，具体配置如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php?$args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如nginx无配置，在location &#x2F;加入该配置即可。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>WordPress常见问题</tag>
        <tag>WordPress域名</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepSeek R1本地化部署+web端访问+LLM交互平台</title>
    <url>/posts/9b071109.html</url>
    <content><![CDATA[<p>针对DeepSeek高频次服务繁忙问题，本地化部署已成为用户实现稳定、高效AI交互的主流方案。通过本地部署，用户可在终端设备上构建私有化知识库系统，实现‌<strong>离线运行、数据隐私保护、低延迟响应</strong>‌等核心需求‌</p>
<p>本文将详细介绍如何基于DeepSeek R1+Ollama+Cherry Studio+Page Assist实现本地化部署，帮助您轻松搭建并使用DeepSeek服务。通过Web UI界面，您可以直接与模型进行交互式对话；同时，借助功能强大的交互平台架构，打造属于自己的专属AI聊天室变得轻而易举。</p>
<h2 id="一、基础环境搭建"><a href="#一、基础环境搭建" class="headerlink" title="一、基础环境搭建"></a>一、基础环境搭建</h2><ol>
<li><h3 id="什么是Ollama"><a href="#什么是Ollama" class="headerlink" title="什么是Ollama"></a>什么是Ollama</h3></li>
</ol>
<p>​	Ollama 是一个可以在本地轻松部署开源大语言模型（LLM）的工具框架，它允许开发者在本地环境中方便地运行和测试不同的语言模型，如 DeepSeek、Llama等。</p>
<p>​	官网地址：<a href="https://ollama.com/">https://ollama.com/</a></p>
<p>​	github地址：<a href="https://github.com/ollama/ollama">https://github.com/ollama/ollama</a></p>
<ol start="2">
<li><h3 id="安装Ollama"><a href="#安装Ollama" class="headerlink" title="安装Ollama"></a>安装Ollama</h3></li>
</ol>
<ul>
<li><p>访问<a href="https://ollama.com/download">Ollama官网</a>下载对应操作系统的安装包（Windows&#x2F;macOS&#x2F;Linux），完成一键安装‌</p>
<p>我这里以windows为例：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/02/28/zjil1y-1.png" alt="image-20250228214909456"></p>
<p>  下载完成后进行安装：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/02/28/zmm92z-1.png" alt="image-20250228215430924"></p>
</li>
<li><p>安装验证</p>
<p>安装完成后，在powershell中输入ollama -v，如果显示版本号即安装成功</p>
<p><img src="https://image.qiubite.fun/i/1/2025/02/28/zp2wi8-1.png" alt="image-20250228215845649"></p>
</li>
</ul>
<ol start="3">
<li><h3 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h3></li>
</ol>
<p>各型号特性与硬件需求如下：</p>
<table>
<thead>
<tr>
<th>型号</th>
<th>CPU</th>
<th>内存</th>
<th>显卡（显存要求）</th>
<th>存储</th>
<th>适用场景</th>
<th>成本参考</th>
</tr>
</thead>
<tbody><tr>
<td>‌1.5B‌</td>
<td>4核（Intel i5&#x2F;Ryzen 5）</td>
<td>≥8GB</td>
<td>核显或低端独显（≥4GB）</td>
<td>≥20GB SSD</td>
<td>简单文本生成、轻量开发</td>
<td>个人级（2k-5k）</td>
</tr>
<tr>
<td>‌7B‌</td>
<td>8核（i7&#x2F;Ryzen 7）</td>
<td>≥16GB</td>
<td>中端独显（RTX 3060，≥8GB）</td>
<td>≥50GB NVMe</td>
<td>代码生成、数据分析</td>
<td>入门级（5k-1.5w）</td>
</tr>
<tr>
<td>‌8B‌</td>
<td>8核（i7&#x2F;Ryzen 7）</td>
<td>≥16GB</td>
<td>中高端独显（RTX 4060，≥10GB）</td>
<td>≥50GB NVMe</td>
<td>逻辑推理、轻量高精度任务</td>
<td>进阶级（1w-3w）</td>
</tr>
<tr>
<td>‌14B‌</td>
<td>12核（i9&#x2F;Ryzen 9）</td>
<td>≥32GB</td>
<td>高端独显（RTX 4090，≥16GB）</td>
<td>≥100GB NVMe</td>
<td>复杂任务（合同分析、长文本）</td>
<td>企业级（3w-8w）</td>
</tr>
<tr>
<td>‌32B‌</td>
<td>16核（服务器级）</td>
<td>≥64GB</td>
<td>专业卡（A100 40GB）</td>
<td>≥200GB NVMe</td>
<td>多模态处理、专业领域咨询</td>
<td>高性能级（8w-15w）</td>
</tr>
<tr>
<td>‌70B‌</td>
<td>32核（双路Xeon&#x2F;EPYC）</td>
<td>≥128GB</td>
<td>多卡集群（2x A100&#x2F;H100）</td>
<td>≥500GB NVMe</td>
<td>科研级推理、大规模生成</td>
<td>科研级（15w-50w）</td>
</tr>
<tr>
<td>‌671B‌</td>
<td>多节点服务器</td>
<td>≥512GB ECC</td>
<td>分布式GPU集群（8x H100）</td>
<td>≥1TB NVMe</td>
<td>超大规模训练、AGI探索</td>
<td>顶尖级（50w+）</td>
</tr>
</tbody></table>
<ol start="4">
<li><h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3></li>
</ol>
<p>根据选择好的模型进行拉取，详情可见ollama官网Models中的<a href="https://ollama.com/library/deepseek-r1">deepseek-r1</a>，命令如下：</p>
<p><strong>DeepSeek-R1-Distill-Qwen-1.5B</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:1.5b</span><br></pre></td></tr></table></figure>

<p><strong>DeepSeek-R1-Distill-Qwen-7B</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:7b</span><br></pre></td></tr></table></figure>

<p><strong>DeepSeek-R1-Distill-Llama-8B</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:8b</span><br></pre></td></tr></table></figure>

<p><strong>DeepSeek-R1-Distill-Qwen-14B</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:14b</span><br></pre></td></tr></table></figure>

<p><strong>DeepSeek-R1-Distill-Qwen-32B</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:32b</span><br></pre></td></tr></table></figure>

<p><strong>DeepSeek-R1-Distill-Llama-70B</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ollama run deepseek-r1:70b</span><br></pre></td></tr></table></figure>



<p>​	若出现success，则拉取完成，会自动启用该模型。如下图：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/02/28/12ja0hy-1.png" alt="image-20250228233009280"></p>
<ol start="5">
<li><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3></li>
</ol>
<p>​	博主的配置是4080ti显卡，32G内存，i7 8086k CPU，使用的是deepseek-r1:14b，思考速度大约15s左右，CPU使用率80%左右，内存使用率40%，GPU 使用率54%，显存使用率92%。ollama全部加载在GPU中。可供各位小伙伴选择模型时参考。</p>
<p>CPU使用率：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/1ziuyn-1.png" alt="image-20250228233855506"></p>
<p>GPU使用率：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/02/28/12yf0a0-1.png" alt="image-20250228235552545"></p>
<p>ollama完全使用GPU：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/02/28/12yyjbb-1.png" alt="image-20250228235643561"></p>
<p>在升级至DeepSeek-R1:32B这类专业级模型时，需配置显存更高且专业的显卡，由于模型参数量达320亿级别，显存不足会导致用户界面响应会出现明显卡顿，系统将自动调用大量系统内存进行补偿，单次任务处理时长普遍超过200秒。</p>
<p>各个版本占用的空间如下：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/51smj-1.png" alt="image-20250301000848810"></p>
<h2 id="二、打造专属DeepSeek"><a href="#二、打造专属DeepSeek" class="headerlink" title="二、打造专属DeepSeek"></a>二、打造专属DeepSeek</h2><ol>
<li><h3 id="安装Cherry-Studio"><a href="#安装Cherry-Studio" class="headerlink" title="安装Cherry Studio"></a>安装Cherry Studio</h3></li>
</ol>
<p>​	前往<a href="https://cherry-ai.com/">Cherry Studio 官方网站</a>，根据你的操作系统下载安装。</p>
<ol start="2">
<li><h3 id="配置Cherry-Studio"><a href="#配置Cherry-Studio" class="headerlink" title="配置Cherry Studio"></a>配置Cherry Studio</h3></li>
</ol>
<p>​	打开 Cherry Studio，在设置中找到模型服务</p>
<ul>
<li>从模型列表中的Ollama选择与你本地部署的 DeepSeek-R1 模型版本对应的选项</li>
</ul>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/i6msp-1.png" alt="image-20250301003054702"></p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/j8vq7-1.png" alt="image-20250301003232975"></p>
<ul>
<li><p>默认模型中选择本地部署对应的模型</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/m60qk-1.png" alt="image-20250301003723515"></p>
</li>
<li><p>目前新版的Cherry Studio已支持网络搜索，在网络搜索中可以注册Tavily并设置api秘钥，注册账号可以用github或google</p>
</li>
</ul>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/nub35-1.png" alt="image-20250301004004172"></p>
<ol start="3">
<li><h3 id="使用Cherry-Studio"><a href="#使用Cherry-Studio" class="headerlink" title="使用Cherry Studio"></a>使用Cherry Studio</h3></li>
</ol>
<p>​	配置到这里就可以开始使用专属自己的DeepSeek了，如需使用网络搜索，可在助手页面点开“开启网络搜索”。智能体内也有一些预设的提示词可供食用。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/v7lke-1.png" alt="image-20250301005242312"></p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/vkryc-1.png" alt="image-20250301005303173"></p>
<h2 id="三、配置使用Web-UI"><a href="#三、配置使用Web-UI" class="headerlink" title="三、配置使用Web UI"></a>三、配置使用Web UI</h2><ol>
<li><h3 id="Page-Assist是什么"><a href="#Page-Assist是什么" class="headerlink" title="Page Assist是什么"></a>Page Assist是什么</h3></li>
</ol>
<p>​	Page Assist 是一款开源浏览器扩展程序，主要用于提升用户在网页浏览过程中与本地 AI 模型的交互效率，提供类似 ChatGPT 的 Web UI 界面，且支持用户与本地运行的 AI 模型（如 Ollama、Gemini Nano、DeepSeek 等）进行多轮对话‌。</p>
<ol start="2">
<li><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a><strong>安装与配置</strong></h3></li>
</ol>
<p>Github 官网：<a href="https://github.com/n4ze3m/page-assist">https://github.com/n4ze3m/page-assist</a></p>
<p>首先打开Chrome浏览器，进入应用商店，搜索<a href="https://chromewebstore.google.com/detail/jfgfiigpkhlkbnfnbobbkinehhfdhndo?utm_source=item-share-cp">Page Assist</a>，点击添加至Chrome：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/1q260d-1.png" alt="image-20250301010423793"></p>
<p>添加后在浏览器右上角的扩展程序图标中打开它即可看到Web UI界面了：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/1qr26r-1.png" alt="image-20250301010539620"></p>
<p>点击右上角设置，可以修改语音识别语言和界面显示语言：</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/1rvrkk-1.png" alt="image-20250301010730076"></p>
<p>选择好本地搭建好的模型后即开始使用，并且可以开启搜索网络。</p>
<p><img src="https://image.qiubite.fun/i/1/2025/03/01/1t4goy-1.png" alt="image-20250301010939030"></p>
]]></content>
      <categories>
        <category>AIGC</category>
      </categories>
      <tags>
        <tag>DeepSeek本地部署</tag>
        <tag>ollama</tag>
        <tag>Cherry Studio</tag>
        <tag>LLM交互平台</tag>
        <tag>Page Assist</tag>
      </tags>
  </entry>
</search>
